■　設定ファイルをconfigフォルダにまとめる。
cd tfc
django-admin.py startproject config .
python manage.py startapp tcode

■　templates と static フォルダを manage.py と同階層に置く
cd tfc
mkdir static
mkdir templates/tcode

■ settings.py 編集
config/settings.py
------------------------------
=> LANGUAGE_CODE = 'ja'
=> TIME_ZONE = 'Asia/Tokyo'

○　アプリケーションを追加
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
=>  'tcode',
]

○ 静的ファイル
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        #'DIRS': [],
=>	'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

STATIC_URL = '/static/'

=> STATICFILES_DIRS = (
=>     os.path.join(BASE_DIR, "static"),
=> )

○  データベース
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        #'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
=>        'NAME': os.path.join(BASE_DIR, 'tfc.sqlite'),
    }
}

------------------------------

■　既存データベース取り込み

* DBファイルを指定したら、まず、inspection
* 既存DBのschema をmodels.py に取り込み
python manage.py inspectdb >> tcode/models.py

* Django のマイグレーションを実行
python manage.py migrate

* models.py の多対１など設定。
inv = models.ForeignKey(Inv, on_delete=models.PROTECT)

*model.py 設定後 マイグレーション
(venv)$ python mysite/manage.py makemigrations
(venv)$ python mysite/manage.py migrate 

■ templates 編集
templates/tocde/index.html

■ views 編集
tcode/views.py
----------------------------------------
from django.shortcuts import render

def index(request):
    return render(request, 'tcode/index.html')
----------------------------------------


■ url 編集
config/urls.py
----------------------------------------
from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('tcode', include('tcode.urls')),
]

tcode/urls.py
----------------------------------------
from django.urls import path
from . import views

app_name = 'tcode'
urlpatterns = [
    path('', views.index, name='index'),
]

■　Django 管理機能設定
○  管理者設定
python manage.py createsuperuser

○　データベース追加
# tcode/admin.py
-------------------------------
from django.contrib import admin
from .models import Po, TfcCode

class PoAdmin(admin.ModelAdmin):
    list_display = ('id', 'pon', 'pod', 'etd', 'port')
    list_display_links = ('pon')
 
admin.site.register(Po)
admin.site.register(TfcCode)
-------------------------------

○　モデル修正
# tcode/models.py
-------------------------------
    # 追記
    def __str__(self):
        return self.pon

■　汎用クラス ListView
# tcode/views.py
-------------------------------
from django.shortcuts import render
from .models import TfcCode
from django.views.generic import ListView
 
 
class CodeList(ListView):
    model = TfcCode

○　path追加
#tcode/urls.py
---------------------
urlpatterns = [
    path('list/', views.CodeList.as_view(), name='list'),
]

○　template 作成
#template/tcode/tfccode_list.html
---------------------
<!DOCTYPE html>
<html>
 
<head>
    <meta charset="utf-8" />
    <title>ListViewサンプル</title>
</head>
 
<body>
    <table border="1">
        <tr>
            <th>品番</th>
            <th>アイテム</th>
            <th>詳細</th>
            <th>備考</th>
            <th>単価</th>
            <th>単位</th>
            <th>フクラ品番</th>
            <th>カテゴリ</th>
        </tr>
        {% for code in object_list %}
        <tr>
            <td>{{ code.hinban }}</td>
            <td>{{ code.item }}</td>
            <td>{{ code.description }}</td>
            <td>{{ code.uprice }}</td>
            <td>{{ code.unit }}</td>
            <td>{{ code.hcode }}</td>
            <td>{{ code.cat }}</td>
        </tr>
        {% endfor %}
    </table>
</body>

 
■　検索機能追加
○　検索フォーム追加
#template/tcode/tfccode_list.html
---------------------
(追加)
    <form action="" method="get">
        <input name="query" value="{{ request.GET.query }}" type="text">
        <button type="submit">検索する</button>
    </form>

○　view に検索フィルター機能追加
#tcode/views.py
---------------------
(追加)
from django.db.models import Q

class CodeList(ListView):
 
    def get_queryset(self):
        q_word = self.request.GET.get('query')
 
        if q_word:
            object_list = TfcCode.objects.filter(
                Q(hinban__icontains=q_word) | Q(item__icontains=q_word) \
                | Q(description__icontains=q_word) | Q(remark__icontains=q_word))
        else:
            object_list = TfcCode.objects.all()
        return object_list


■　ページング
#tcode/views.py
---------------------
(追加)

class CodeList(ListView):
   paginate_by = 3

#tcode/tfccode_list.html
---------------------
(追加)

<nav>
    <ul>
        <!-- はじめ、前へ -->
        {% if page_obj.has_previous %}
        <li><a href="?page=1">はじめ</a></li>
        <li><a href="?page={{ page_obj.previous_page_number }}">前へ</a></li>
        {% endif %}
 
 
        {% for n in page_obj.paginator.page_range %}
 
        {% if page_obj.number == n %}
        <li>{{ n }}</li>
        {% elif n > page_obj.number|add:'-2' and n < page_obj.number|add:'2' %}
        <li><a href="?page={{ n }}">{{ n }}</a></li>
        {% endif %}
 
        {% endfor %}
 
        <!-- 次へ、おわり -->
        {% if page_obj.has_next %}
        <li><a href="?page={{ page_obj.next_page_number }}">次へ</a></li>
        <li><a href="?page={{ page_obj.paginator.num_pages }}">おわり</a></li>
        {% endif %}
    </ul>
</nav>

○　検索ワードをテンプレートに辞書で渡すため
#tcode/views.py
---------------------
(追加)

    def get_context_data(self, **kwargs):
        context = super(CodeList, self).get_context_data(**kwargs)
        q_word = self.request.GET.get('query')
	if q_word:
        	context['q_word'] = q_word
	else:
        	context['q_word'] = ''
		
        return context


#template/tcode/tfccode_list.html
---------------------
<li><a href="?query={{q_word}}&page=1">はじめ</a></li>
など、query={{q_word}} を追加

■　CRUD
○　path 追加
#tcode/urls.py
---------------------
(追加)
    # 新規作成のURL: /post/create/
    path('create/', views.CreateView.as_view(), name='create'),
 
    # 以下では記事IDを 123 とします
    # 詳細表示のURL: /tcode/detail/123/
    path('detail/<int:pk>/', views.CodeDetail.as_view(), name='detail'),
 
    # 内容更新のURL: /tcode/update/123/
    path('update/<int:pk>/', views.CodeUpdate.as_view(), name='update'),
    
    # 記事削除のURL: /post/123/delete/
    path('delete/<int:pk>/', views.CodeDelete.as_view(), name='delete'),

■  CreateView
#tcode/views.py
---------------------
(追加)
from django.urls import reverse

class CodeCreate(edit.CreateView):
    template_name = 'tcode/tfccode_create.html'
    model = TfcCode
    fields = ['hinban', 'item', 'description' ,
    	'remarks', 'uprice', 'unit' , 'zaiko', 'kento', 'vol', 'hcode']
 
    def get_success_url(self):
        return reverse('detail', kwargs={'pk': self.object.pk})

#tcode/tfccode_create.html
---------------------
(新規)
<!DOCTYPE html>
<html>
 
<head>
    <meta charset="utf-8" />
    <title>CreateViewサンプル</title>
</head>
 
<body>
    <h1>CreateView新規作成画面</h1>
    <form method="post" novalidate>
        {% csrf_token %}
        {{ form.as_p }}
        <input type="submit" value="保存">
    </form>
</body>
 
</html>

■　DetailView
○  リストにリンクを追加
#templates/tcode/tfccode_list.html
	<th><a href="{% url 'tcode:detail' code.pk %}">詳細</a></th>

○　テンプレート作成
#templates/tcode/tfccode_detail.html
   <table border="1">
        <tr>
            <th>品番</th>
		...
        </tr>
        <tr>
            <td>{{ tfccode.hinban }}</td>
		...


■  UpdateView
○  リストにリンクを追加
#templates/tcode/tfccode_list.html
	<th><a href="{% url 'tcode:detail' code.pk %}">詳細</a></th>
	<th><a href="{% url 'tcode:update' code.pk %}">編集</a></th>

○　テンプレート作成
#templates/tcode/tfccode_update.html

■　ModelForm を作成
○　モデルを編集
#tcode/models.py
class TfcCode(models.Model):
    hinban = models.CharField(max_length = 100,
        verbose_name='品番',
        help_text='品番を入力してください')

○　マイグレーション
設定情報リセット(反映しないとき)
python manage.py migrate --fake tcode zero
python manage.py showmigrations
対象のアプリケーションフォルダ内のmigrationsフォルダの「__init__.py」ファイル以外のファイルを削除します。
※__pycache__フォルダも含む
python manage.py makemigrations
python manage.py migrate

○　 forms.py を作成(ModelForm)
#tcode/forms.py
-----------------------------------
from django import forms
from .models import TfcCode

class CodeForm(forms.ModelForm):

    class Meta:
        model = TfcCode
        fields = ('hinban', 'item', 'description' ,\
            'remarks', 'uprice', 'unit' , 'zaiko', 'kento', 'vol', 'hcode')

        widgets = {
            'hinban': forms.TextInput(attrs={'size': 40}),
            'item': forms.TextInput(attrs={'size': 40}),
            'description': forms.Textarea(attrs={'cols': 50, 'rows': 3}),
            'remarks': forms.Textarea(attrs={'cols': 50, 'rows': 3})
        }


○　views.py 編集
#templates/tcode/views.py
---------------------
(追加)
from .forms import CodeForm
class CodeCreate(CreateView):
    model = TfcCode
    form_class = CodeForm

■　リンク
 <a href="{% url 'tcode:list' %}">品番リスト検索</a><br>
 <a href="{% url 'tcode:create' %}">新規入力</a><br>
 <a href="{{request.META.HTTP_REFERER}}">戻る</a>

@@@ CreateView 保存トラブル @@@
保存すると、id が None だったり、かえってくる
primary key の値 code.pk がおかしかったり、
manage.py makemigratons が反映しなかったり。
manage.py inspectdb してみると、id が blank=True, null=Trueに
なっている。
tcode/models.py で、
id = models.AutoField(primary_key=True, blank=False, null=False) 
と設定して、makemigration, migrate したら、治った。
その後、id の指定は外して makemigration, migrate すると
外しても、正常に動くようになった。
なんだったのか。

■　 更新/追加　ボタン

#views.py
---------------------
class CodeUpdate(UpdateView):
（追加)
    context_object_name = 'code'

    def form_valid(self, form):

        code = form.save(commit=False)

        # 追加ボタンのとき
        if 'save_and_add' in self.request.POST:
            code.id = None
            code.pk = None

        code.save()
        return HttpResponseRedirect(self.get_success_url())


#tcode/tfccode_update.html
---------------------
（追加)
   <h1>UpdateView編集画面</h1>
    <form method="post" novalidate>
        {% csrf_token %}
        {{ form.as_p }}
        <button type="submit" name="save_and_edit">更新</button>
        <button type="submit" name="save_and_add">追加保存</button>
  </form>

■  Bootstrap4
pip install django-bootstrap4

# mysite/mysite/settings.py
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'bootstrap4', #ここに追加！
]

.........

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
            'builtins':[ 
                'bootstrap4.templatetags.bootstrap4',　# ここに追加！
            ],
        },
    },
]

# mysite/index.html
<!DOCTYPE html>
{% load static %}

{% bootstrap_css %} # これを書かないとタグが適応されないよ( ;∀;)
{% bootstrap_javascript jquery='full' %}

○　table
<table class="table table-sm table-striped table-bordered ">
○  btn
<a href="{% url 'tcode:index' %}" class="btn btn-link btn-sm ">TOP</a>
○　pagination
<nav aria-label="ページ送り">
    <ul class="pagination">
        <!-- はじめ、前へ -->
        {% if page_obj.has_previous %}
        <li class="page-item"><a class="page-link" href="?query={{q_word}}&page=1">はじめ</a></li>
など

■  base template 作成 ナビ付き
#templates/base.html
---------------------
<!DOCTYPE html>
<html>
{% load static %}
{% bootstrap_css %}
{% bootstrap_javascript jquery='full' %}

<head>
    <meta charset="utf-8" />
    <title> {% block page_title %} {% endblock %} </title>
</head>
<body>
<div class="container-fluid">
<nav class="navbar navbar-expand-md  navbar-light bg-light">
  <button type="button" class="navbar-toggler" data-toggle="collapse" data-target="#bs-navi" aria-controls="bs-navi" aria-expanded="false" aria-label="Toggle navigation">
    <span class="navbar-toggler-icon"></span>
  </button>
  
  <div class="collapse navbar-collapse" id="bs-navi">
    <ul class="navbar-nav">
      <li class="nav-item"><a class="nav-link" href="{% url 'tcode:index' %}">ホーム</a></li>
      <li class="nav-item"><a class="nav-link" href="{% url 'tcode:list' %}">TFCコード検索</a></li>
    </ul>
  </div>
</nav>


	{% block content %}{% endblock %}
</div>
</body>
---------------------
■  modelform + bootstrap
#tcode/forms.py
---------------------
（追加)

   def __init__(self, *args, **kwargs):
        super(CodeForm, self).__init__(*args, **kwargs)
        for field in iter(self.fields):
            self.fields[field].widget.attrs.update({
            'class': 'form-control'
            })

#tcode/tfccode_update.html
---------------------
（追加)

    <h1>TFCコード編集画面</h1>
    <form method="post" novalidate>
        {% csrf_token %}
	<div class="form-group"> 
    	{{ form }}
	</div>

○　djang-bootstrap4 のタグを利用
** 上記の２つの追加は不要

#tcode/tfccode_update.html
---------------------
{% bootstrap_form form layout='horizontal' %}

#templates/base.html
---------------------
{% load bootstrap4 %}

■ 　バイオーダー発注アプリを作る
python manage.py startapp byorder

#config/setting.py
---------------------
INSTALLED_APPS = [
	...
    'byorder',
]
...
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

#config/urls.py
---------------------
urlpatterns = [
    path('admin/', admin.site.urls),
	...
    path('byorder/', include('byorder.urls'))
]

#byorder/urls.py
---------------------
urlpatterns = [
    path('upload/', views.JuchuCreate.as_view(), name='upload'),
    path('jlist/', views.JuchuList.as_view(), name='jlist'),
]


#byorder/models.py
---------------------
from django.db import models

class Juchu(models.Model):
    description = models.CharField(max_length=255,blank=True)
    juchu = models.FileField(upload_to='juchu/')
    uploaded_at = models.DateTimeField(auto_now_add=True)

#byorder/forms.py
---------------------
from django import forms
from .models import Juchu

class JuchuForm(forms.ModelForm):

    class Meta:
        model = Juchu
        fields = ('juchu', )

#byorder/views.py
---------------------
from django.shortcuts import render,redirect
from .forms import JuchuForm
from .models import Juchu
from django.views.generic import ListView, DetailView, CreateView, UpdateView, DeleteView
from django.urls import reverse_lazy

class JuchuList(ListView):
    template_name = 'byorder/jlist.html'
    model = Juchu
    paginate_by = 10

class JuchuCreate(CreateView):
    """ファイルモデルのアップロードビュー"""
    model = Juchu
    form_class = JuchuForm
    template_name = 'byorder/juchu_upload.html'
    success_url = reverse_lazy('byorder:jlist')


#byorder/juchu_upload.html
---------------------
{% extends "base.html" %}
{% block page_title %} TFCコード編集 {% endblock %}

{% block content %}
    <h1>受注アップデート画面</h1>

    <form method="post" enctype="multipart/form-data">
        {% csrf_token %}
        {% bootstrap_form form  %}
        <button class="btn btn-primary" type="submit" >アップロード</button>
    </form>
{% endblock %}

#byorder/jlist.html
---------------------
% extends "base.html" %}
{% block page_title %} 受注リスト {% endblock %}

{% block content %}
    <table class="table table-sm table-striped table-bordered ">
        <tr>
            <th>id</th>
            <th>受注日</th>
            <th>受注ファイル名</th>
            <th>アップロード日付</th>
        </tr>
        {% for juchu in object_list %}
        <tr>
            <td>{{ juchu.id }}</td>
            <td>{{ juchu.description }}</td>
            <td>{{ juchu.juchu }}</td>
            <td>{{ juchu.uploaded_at }}</td>
        </tr>
        {% endfor %}
    </table>
<nav aria-label="ページ送り">
...

python manage.py makemigrations byorder
python manage.py migrate
python manage.py runserver

■　受注ファイルのコードの有無をチェック


■　django-allauth 導入
(venv) $pip install django-allauth
config/settings.py
INSTALLED_APPS = [ ... 
	'django.contrib.sites', #追加 
	'allauth', #追加 
	'allauth.account', #追加 
	'allauth.socialaccount', #追加
 	]
config/settings.py
SITE_ID = 1

